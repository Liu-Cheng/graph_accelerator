!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
APP	Makefile	/^APP = pokec $/;"	m
CC	Makefile	/^CC = g++$/;"	m
CFLAGS	Makefile	/^CFLAGS= -g -std=c++11 -O3$/;"	m
CSR	graph.cpp	/^CSR::CSR(const Graph &g) : vNum(g.vertexNum), eNum(g.edgeNum){$/;"	f	class:CSR
CSR	graph.h	/^class CSR{$/;"	c
GL	graph.h	/^class GL{$/;"	c
Graph	graph.cpp	/^Graph::Graph(const std::string& fname){$/;"	f	class:Graph
Graph	graph.h	/^class Graph{$/;"	c
HERE	graph.h	14;"	d
OBJS	Makefile	/^OBJS = $(SRCS:.cpp=.o)$/;"	m
SRCS	Makefile	/^SRCS = bfs.cpp graph.cpp$/;"	m
TARGET	Makefile	/^TARGET = bfs$/;"	m
Vertex	graph.h	/^        explicit Vertex(int _idx) {$/;"	f	class:Vertex
Vertex	graph.h	/^class Vertex {$/;"	c
__GRAPH_H__	graph.h	2;"	d
alpha	graph.h	/^        float alpha;$/;"	m	class:CSR
basicBfs	graph.cpp	/^bool CSR::basicBfs(const int &startIdx, std::ofstream &fhandle){$/;"	f	class:CSR
beta	graph.h	/^        float beta;$/;"	m	class:CSR
buBfs	graph.cpp	/^bool CSR::buBfs(const int &startIdx, std::ofstream &fhandle){$/;"	f	class:CSR
bucketNum	graph.h	/^        int bucketNum;$/;"	m	class:CSR
burstlen	graph.cpp	/^int GL::burstlen = 64;$/;"	m	class:GL	file:
burstlen	graph.h	/^        static int burstlen;$/;"	m	class:GL
cacheHybridBfs	graph.cpp	/^bool CSR::cacheHybridBfs(const int &startIdx, std::ofstream &fhandle){$/;"	f	class:CSR
cacheThreshold	graph.h	/^        int cacheThreshold;$/;"	m	class:CSR
ciai	graph.h	/^        std::vector<int> ciai;    \/\/ column index array based on incoming vertices$/;"	m	class:CSR
ciao	graph.h	/^        std::vector<int> ciao;    \/\/ column index array based on outgoing vertices$/;"	m	class:CSR
degreeAnalysis	graph.cpp	/^void CSR::degreeAnalysis(){$/;"	f	class:CSR
eNum	graph.h	/^        const int eNum;$/;"	m	class:CSR
edgeNum	graph.h	/^        int edgeNum;$/;"	m	class:Graph
getBurstNum	graph.cpp	/^int CSR::getBurstNum(int num, int size){$/;"	f	class:CSR
getHubVertexNum	graph.cpp	/^int CSR::getHubVertexNum(){$/;"	f	class:CSR
getMaxIdx	graph.cpp	/^int Graph::getMaxIdx(const std::vector<std::vector<int>> &data){$/;"	f	class:Graph
getMinIdx	graph.cpp	/^int Graph::getMinIdx(const std::vector<std::vector<int>> &data){$/;"	f	class:Graph
getRandomStartIndices	graph.cpp	/^void Graph::getRandomStartIndices(std::vector<int> &startIndices){$/;"	f	class:Graph
getStat	graph.cpp	/^void Graph::getStat(){$/;"	f	class:Graph
hubVertexThreshold	graph.h	/^        int hubVertexThreshold;$/;"	m	class:CSR
hybridBfs	graph.cpp	/^bool CSR::hybridBfs(const int &startIdx, std::ofstream &fhandle){$/;"	f	class:CSR
idx	graph.h	/^        int idx;$/;"	m	class:Vertex
inDeg	graph.h	/^        int inDeg;$/;"	m	class:Vertex
inVid	graph.h	/^        std::vector<int> inVid;$/;"	m	class:Vertex
isInBuffer	graph.cpp	/^bool CSR::isInBuffer($/;"	f	class:CSR
isUgraph	graph.h	/^        bool isUgraph;$/;"	m	class:Graph
loadFile	graph.cpp	/^void Graph::loadFile($/;"	f	class:Graph
main	bfs.cpp	/^int main(int argc, char** argv){$/;"	f
outDeg	graph.h	/^        int outDeg;$/;"	m	class:Vertex
outVid	graph.h	/^        std::vector<int> outVid;$/;"	m	class:Vertex
rpai	graph.h	/^        std::vector<int> rpai;    \/\/ row pointer array based on incoming vertices$/;"	m	class:CSR
rpao	graph.h	/^        std::vector<int> rpao;    \/\/ row pointer array based on outgoing vertices$/;"	m	class:CSR
setBfsParam	graph.cpp	/^void CSR::setBfsParam($/;"	f	class:CSR
tdBfs	graph.cpp	/^bool CSR::tdBfs(const int &startIdx, std::ofstream &fhandle){$/;"	f	class:CSR
vNum	graph.h	/^        const int vNum;$/;"	m	class:CSR
vertexNum	graph.h	/^        int vertexNum;$/;"	m	class:Graph
vertices	graph.h	/^        std::vector<Vertex*> vertices; $/;"	m	class:Graph
weight	graph.h	/^        std::vector<float> weight; \/\/ It is not actually used in bfs$/;"	m	class:CSR
~Vertex	graph.h	/^        ~Vertex(){$/;"	f	class:Vertex
